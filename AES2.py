from typing import List

# Constantes AES (comme avant...)
Nb, Nk, Nr = 4, 4, 10
sbox = [
     0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 
]
Rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def state_to_hex(state: List[List[int]]) -> str:
    result = ""
    for col in range(4):
        for row in range(4):
            result += f"{state[row][col]:02x}"
    return result

def convert_to_state(input_array: List[int]) -> List[List[int]]:
    state = [[0 for _ in range(4)] for _ in range(4)]
    for col in range(4):
        for row in range(4):
            state[row][col] = input_array[col * 4 + row]
    return state

def convert_from_state(state: List[List[int]]) -> List[int]:
    output = []
    for col in range(4):
        for row in range(4):
            output.append(state[row][col])
    return output

def SubBytes(state: List[List[int]]) -> List[List[int]]:
    return [[sbox[state[row][col]] for col in range(4)] for row in range(4)]

def ShiftRows(state: List[List[int]]) -> List[List[int]]:
    """Correction de ShiftRows pour correspondre au standard AES"""
    result = [[0 for _ in range(4)] for _ in range(4)]
    for row in range(4):
        for col in range(4):
            result[row][col] = state[row][(col + row) % 4]
    return result

def xtime(a: int) -> int:
    return ((a << 1) ^ 0x1b) & 0xff if a & 0x80 else (a << 1)

def multiply_gf(a: int, b: int) -> int:
    result = 0
    a &= 0xff
    b &= 0xff
    while b:
        if b & 1:
            result ^= a
        a = xtime(a)
        b >>= 1
    return result & 0xff

def MixColumns(state: List[List[int]]) -> List[List[int]]:
    mix_columns_matrix = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]
    result = [[0 for _ in range(4)] for _ in range(4)]
    for col in range(4):
        for row in range(4):
            sum_value = 0
            for k in range(4):
                sum_value ^= multiply_gf(mix_columns_matrix[row][k], state[k][col])
            result[row][col] = sum_value
    return result

def AddRoundKey(state: List[List[int]], round_key: List[List[int]]) -> List[List[int]]:
    return [[state[row][col] ^ round_key[row][col] for col in range(4)] for row in range(4)]

def KeyExpansion(key: List[int]) -> List[List[List[int]]]:
    w = [[] for _ in range(Nb * (Nr + 1))]
    key_state = convert_to_state(key)
    
    for i in range(Nk):
        w[i] = [key_state[j][i] for j in range(4)]
    
    for i in range(Nk, Nb * (Nr + 1)):
        temp = w[i-1].copy()
        if i % Nk == 0:
            temp = temp[1:] + temp[:1]
            temp = [sbox[b] for b in temp]
            temp[0] ^= Rcon[i//Nk - 1]
        w[i] = [w[i-Nk][j] ^ temp[j] for j in range(4)]
    
    round_keys = []
    for i in range(Nr + 1):
        round_key = [[0 for _ in range(4)] for _ in range(4)]
        for col in range(4):
            for row in range(4):
                round_key[row][col] = w[4*i + col][row]
        round_keys.append(round_key)
    return round_keys

def AES_Encrypt(plaintext: List[int], key: List[int]) -> List[int]:
    state = convert_to_state(plaintext)
    round_keys = KeyExpansion(key)
    
    print(f"round[ 0].input {state_to_hex(state)}")
    print(f"round[ 0].k_sch {state_to_hex(round_keys[0])}")
    
    state = AddRoundKey(state, round_keys[0])
    
    for round in range(1, Nr):
        print(f"round[{round:2d}].start {state_to_hex(state)}")
        state = SubBytes(state)
        print(f"round[{round:2d}].s_box {state_to_hex(state)}")
        state = ShiftRows(state)
        print(f"round[{round:2d}].s_row {state_to_hex(state)}")
        state = MixColumns(state)
        print(f"round[{round:2d}].m_col {state_to_hex(state)}")
        print(f"round[{round:2d}].k_sch {state_to_hex(round_keys[round])}")
        state = AddRoundKey(state, round_keys[round])
    
    print(f"round[{Nr}].start {state_to_hex(state)}")
    state = SubBytes(state)
    print(f"round[{Nr}].s_box {state_to_hex(state)}")
    state = ShiftRows(state)
    print(f"round[{Nr}].s_row {state_to_hex(state)}")
    print(f"round[{Nr}].k_sch {state_to_hex(round_keys[Nr])}")
    state = AddRoundKey(state, round_keys[Nr])
    print(f"round[{Nr}].output {state_to_hex(state)}")
    
    return convert_from_state(state)

def main():
    plaintext = [
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    ]
    
    key = [
        0x00, 0x01, 0x02, 0x03,
        0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f
    ]
    
    AES_Encrypt(plaintext, key)

if __name__ == "__main__":
    main()